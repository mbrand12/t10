require 'yaml'

module T10
  # This class is used for manipulating the array of rooms generated by the
  # {Dungeon} class and for saving the game to a yml file.
  class Story

    @save_path = File.expand_path('../../../data/game.yml', __FILE__)
    @dungeon = nil

    # Generates a new dungeon and clears the save file defined by the
    # `@save_path` class instance variable.
    #
    # @return [void]
    def self.new_adventure
      # checks weather the save file exists in the location provided by
      # the @save_path, if that isn't the case it throws an exception.
      check_save_file

      # generates an [Array<Room>]
      @dungeon = Dungeon.generate

      data = {
        dungeon: []
      }
      File.open(@save_path, 'w') {|f| YAML.dump(data, f)}
    end

    # Saves the dungeon array to the save file in the yml format.
    #
    # @raise [RuntimeError] if the file is not found.
    # @return [void]
    def self.save_adventure
      check_save_file

      data = {
        dungeon: @dungeon
      }
      File.open(@save_path, 'w') {|f| YAML.dump(data, f)}
    end

    # Loads the dungeon array from the save file.
    #
    # @raise [RuntimeError] if the file is not found.
    # @return [void]
    def self.load_adventure
      check_save_file
      data = YAML.load_file(@save_path)
      @dungeon = data[:dungeon]
    end

    # Return the room in which the hero currently resides or nil otherwise.
    #
    # @return [Room, nil]
    def self.current_room
      @dungeon.find { |room| room.hero_here?}
    end

    # Checks weather there is a proper save file on the defined @save_path.
    #
    # @raise [RuntimeError] if the file is not found.
    # @return [Boolean]
    def self.ongoing_adventure?
      check_save_file
      data = YAML.load_file(@save_path)
      return false unless data.is_a?(Hash)
      data.key?(:dungeon) && data[:dungeon].any? && data[:dungeon].size == 12
    end

    private

    def self.check_save_file
      fail RuntimeError, "Save file not found" unless File.exist?(@save_path)
    end
  end
end
